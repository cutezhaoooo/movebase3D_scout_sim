#pragma once
#include "execution_classes.hpp"
#include "visualization_msgs/msg/marker_array.hpp"

using namespace Eigen;
using namespace rclcpp;
using namespace std;

namespace EXECUTION
{
    namespace visualization
    {
        /**
         * @brief make frame to show pose and shape
         */
        vector<Vector4d> generateFrame(const vector<Vector3d>& pts, const vector<float>& color_pts,
            const vector<Quaterniond>& orientations);

        /**
         * @brief visualize the grid map
         */
        void visWorld(World* world, Publisher<sensor_msgs::msg::PointCloud2>::SharedPtr world_vis_pub);

        /**
         * @brief visualize the plane of the nodes along the path generated by PF-RRT*
         */
        void visSurf(const vector<Node*>& solution, Publisher<sensor_msgs::msg::PointCloud2>::SharedPtr surf_vis_pub);

        /**
         * @brief visualize the start point and the end point of PF-RRT*
         */
        void visOriginAndGoal(const vector<Node*>& nodes, Publisher<visualization_msgs::msg::Marker>::SharedPtr origin_and_goal_vis_pub);

        /**
         * @brief visualize the path generated by PF-RRT*
         */
        void visPath(const vector<Node*>& solution, Publisher<visualization_msgs::msg::Marker>::SharedPtr path_vis_pub);

        /**
         * @brief visualize the tree of PF-RRT*
         */
        // void visTree(const std::vector<Node*> &tree,rclcpp::Publisher<visualization_msgs::msg::MarkerArray>::SharedPtr tree_vis_pub);
        void visTree(const vector<Node*>& tree, Publisher<visualization_msgs::msg::Marker>::SharedPtr tree_vis_pub);
    }
}
